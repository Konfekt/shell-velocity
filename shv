#!/bin/sh

set -e
# set -x

auto_cd=${SHV_AUTO_CD:-"true"}
capture_file="$SHV_CAPTURE_FILE"
date_fmt=${SHV_DATE_FMT:-"%Y-%m-%d"}
diary_path=${SHV_DIARY_PATH:-"$SHV_PATH/diary"}
editor=${SHV_EDITOR:-${EDITOR:=vi}}
exts=${SHV_EXTS:-"md adoc txt org"}
histfile="${XDG_DATA_HOME:-$HOME/.local/share}/shv_history"
history_on=${SHV_HISTORY:-"true"}
ignore=${SHV_IGNORE:-"./.obsidian/* ./.git/*"}
path=${SHV_PATH:-"$HOME/Documents/notes"}
picker=${SHV_PICKER:-"fzf -m --ansi --print-query --bind=alt-enter:print-query"}
subcmd=${SHV_DEFAULT_CMD:-"search"}
os=$(uname)
ext=$(printf "%s" "$exts" | cut -d' ' -f1)

###### UTILITY ######

oneline_usage="usage: shv [SUBCOMMAND] [ARGS]"

usage() {
    cat <<EOF
$0: illegal subcommand -- $1
$oneline_usage
For more info run 'shv help'
EOF
    exit 0
}

help() {
    less <<EOF
NAME
    shv - shell velocity

SYNOPSIS
    $oneline_usage

SUBCOMMANDS

    a, bookmarks
        Edit a file you edit often by simply using the number is located in
        SHV_BMS

    c, capture
        Puts what you gave as an argument into your SHV_CAPTURE_FILE (by
        default today's daily note).

        Also if you pipe a string to shv the string will be captured in you
        SHV_CAPTURE_FILE

            pbpaste | shv

            curl <some-webpage> | shv

    d, diary
        Searches in your SHV_DIARY_PATH for notes, and uses your picker to
        select what daily file to choose.

    h, history
        Searches through your edit history and uses your picker to select some
        notes.

    s, search
        grep all the files with your SHV_EXTS in your SHV_PATH. If no
        match is found, or you use the keybinding to create a note (if your
        SHV_PICKER support keybindings), a new note will be created.

    sel, select
        Select one, or more, of your files by filename (a more traditional
        fuzzy search through files).

    t, today
    tm, tomorrow
    y, yesterday
        Get the corresponding daily note associated with the day. If passed a
        label that label will be append it to the filename with an '_'
        character.

    v, version
        Prints version informations generated from git.

    help
        Open help page in less.

ENVIROMENT

    The script is configured and customized through enviroment variables.

    SHV_AUTO_CD: specify if auto cd to SHV_PATH when edit file (default:true)

    SHV_BMS: space separated list specifing names of bookmarked files (default:"")

        export SHV_BMS="todo.md log.md"

    SHV_CAPTURE_FILE: file where to store captured data (default:today's note)

    SHV_DATE_FMT: format used by the date command (default:%Y-%m-%d)

        export SHV_DATE_FMT="%d-%m-%Y"

    SHV_DEFAULT_CMD: default command that run when not subcommand is specified (default:search)

        export SHV_DEFAULT_CMD="select"

    SHV_DIARY_PATH: path to diary notes (default:SHV_PATH/diary)

    SHV_EDITOR: editor used to edit your notes. (default:EDITOR)

    SHV_EXTS: space separated list of extentions to search for in SHV_PATH. The
    first will be considered your primary extention and new notes will be
    created with it (default:md adoc txt org)

        export SHV_EXTS="markdown rmd txt"

    SHV_DIARY_EXT: extention to be used only for your diary. For example you
    could use only org for todos and you want your daily task to be writtern in
    orgmode (default:"")

        export SHV_DIARY_EXT="org"

    SHV_HISTORY: specify if you want to save history of edited files (default:true)

    SHV_IGNORE: space separated list for ignored directories and
    files. (default:./.obsidian/* ./.git/*")

        export SHV_IGNORE="./.git/* ./pdfs/*"

    SHV_PATH: path to notes (default:~/Documents/notes)

    SHV_PICKER: fuzzy finder/filter used to select notes
    (default:fzf -m --ansi --print-query --bind=alt-enter:print-query")


EXAMPLES

    - Select the first bookmarked file

        shv bookmark 1

    - Open today's note with label 'work'

        shv today work
EOF
    exit 0
}

version() {
    front=$(git rev-list --count HEAD)
    back=$(git rev-parse --short HEAD)
    printf "r%s.%s\n" "$front" "$back"
    exit 0
}

# Echo to stderr and quit
die() {
    printf '%s: %s.\n' "$0" "$1" >&2
    exit 1
}

strip() {
    # Remove all leading white-space.
    # '${1%%[![:space:]]*}': Strip everything but leading white-space.
    # '${1#${XXX}}': Remove the white-space from the start of the string.
    str="${1#"${1%%[![:space:]]*}"}"
    # Remove all trailing white-space.
    # '${trim##*[![:space:]]}': Strip everything but trailing white-space.
    # '${trim%${XXX}}': Remove the white-space from the end of the string.
    str="${str%"${str##*[![:space:]]}"}"
    printf "%s" "$str"
}

# Normalize string in an usable state
# $1: String
normalize() {
    str=$(strip "$1" | sed "s/\n/#/g; s/\ /-/g; s/\n/#/g; s/#/\s/g")
    printf "%s" "$str"
}

# Parse output of fuctions and return string of files
# $1: filenames
# $2: directory
parse() {
    args=$(normalize "$1")
    for i in $args; do
        [ -f "$i" ] \
            && file=${file:+"$file "}$i \
            || tmp="$2/$i.$ext"
    done
    [ -z "$file" ] && file=$tmp
    printf "%s" "$file"
}

# List files in dir
# $1: directory
get_files() {
    set -f
    query=""
    for ext in $exts; do
        query="${query:+${query} -o} -iname *.${ext}"
    done
    ignore=""
    for ign in $exts; do
        ignore="${ignore:+${ignore}} -not -path ${ign}"
    done
    find "$1" -type f '(' $query ')' '(' $ignore ')'
    set +f
}

# Returns the date of selected day by standard of date command
# $1: n of days
get_date() {
    if [ "$os" = "Linux" ]; then
        date=$(date -d "$1 days" +"$date_fmt")
    else
        date=$(date -v"$1"d +"$date_fmt")
    fi
    printf "%s" "$date"
}

store_hist() {
    files=$(printf "%s" "$@" | tr ' ' '\n')
    dirname=$(dirname "$histfile")
    [ -d "$dirname" ] \
        && printf "%s\n" "$files" >>"$histfile"
}

###### COMMANDS ######

# Returns path to bookmarked file
# $1: index of file in "array" (starts at 1)
bookmark() {
    [ -z "$SHV_BMS" ] && die "There are no bookmarked files"
    bmk=$(printf "%s" "$SHV_BMS" | cut -d' ' -f"$1")
    printf "%s/%s" "$path" "$bmk"
}

capture() {
    [ -z "$capture_file" ] \
        && file=$(diary_note +0) \
        || file="$capture_file"
    printf "%s\n\n" "$*" >>"$file"
}

# Returns the path to note of specified day
# $1: n days
# $2: label
diary_note() {
    date=$(get_date "$1")
    ext=${SHV_DIARY_EXT:-"$ext"}
    if [ -z "$2" ]; then
        printf "%s/%s.%s" "$diary_path" "$date" "$ext"
    else
        printf "%s/%s_%s.%s" "$diary_path" "$date" "$2" "$ext"
    fi
}

# Edit note with EDITOR
# $*: Path to file to edit
edit_notes() {
    "$history_on" \
        && store_hist "$@"
    $editor $*
}

restore_hist() {
    if ! "$history_on"; then
        die "history is not enabled"
    elif ! [ -r "$histfile" ]; then
        die "$histfile is not a redable"
    else
        sel=$(sort -u "$histfile" | sed "/^$/ d" | $picker)
        [ -z "$sel" ] && exit 0
        sel=$(parse "$sel" "$path")
        printf "%s" "$sel"
    fi
}

# Handler to search/create notes
search_notes() {
    sel=$(get_files "$path" | xargs -I {} grep -H "" {} | $picker | sed "s/:.*//g")
    [ -z "$sel" ] && exit 0
    file=$(parse "$sel" "$path")
    printf "%s" "$file"
}

# Handler to select/create notes
# $1: directory to search
select_notes() {
    sel=$(get_files "$1" | $picker | sed "s/\n/#/g")
    [ -z "$sel" ] && exit 0
    file=$(parse "$sel" "$1")
    printf "%s" "$file"
}

###### MAIN ######

# Main function
# $1: subcommands
main() {
    [ -d "$path" ] || die "SHV_PATH doesn't exist"
    "$auto_cd" && cd "$path"
    case "${1:-$subcmd}" in
        b | bookmarks)
            note=$(bookmark "$2")
            ;;
        c | capture)
            args="$*"
            capture "${args##"$1" }"
            ;;
        d | diary)
            note=$(select_notes "$diary_path")
            ;;
        h | history)
            note=$(restore_hist)
            ;;
        search)
            note=$(search_notes)
            ;;
        sel | select)
            note=$(select_notes "$path")
            ;;
        t | today)
            note=$(diary_note +0 "$2")
            ;;
        tm | tomorrow)
            note=$(diary_note +1 "$2")
            ;;
        y | yesterday)
            note=$(diary_note -1 "$2")
            ;;
        help)
            help
            ;;
        v | version)
            version
            ;;
        *)
            usage "$1"
            ;;
    esac
    [ -z "$note" ] && exit 0
    edit_notes "$note"
}

if [ -p /dev/stdin ]; then
    capture "$(cat -)"
else
    main "$@"
fi
