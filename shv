#!/bin/sh

set -e

###### UTILITY ######

usage() {
    cat <<EOF
$0: illegal subcommand -- $1
usage: shv [FLAGS] [SUBCOMMAND] [ARGS]
For more info run 'shv --help'
EOF
    exit 0
}

# Echo to stderr and quit
die() { printf '%s: %s.\n' "$0" "$1" >&2 && exit 1; }

strip() {
    str="${1#"${1%%[![:space:]]*}"}"
    str="${str%"${str##*[![:space:]]}"}"
    printf "%s\n" "$str"
}

# Normalize string in an usable state
# $1: String
normalize() {
    strip "$1" | sed "s/\n/#/g; s/\ /$normalize_ch/g; s/\n/#/g; s/#/\s/g"
}

# Parse output of fuctions and return string of files
# $1: filenames
# $2: directory
parse() {
    args=$(normalize "$1")
    for i in $args; do
        [ -f "$i" ] &&
            file=${file:+"$file "}$i ||
            tmp="$2/$i.$ext"
    done
    : "${file:=$tmp}"
    printf "%s\n" "$file"
}

# List files in dir
# $1: directory
get_files() {
    set -f
    query=""
    for ext in $exts; do
        query="${query:+${query} -o} -iname *.${ext}"
    done
    ignore=""
    for ign in $exts; do
        ignore="${ignore:+${ignore}} -not -path ${ign}"
    done
    find "$1" -type f '(' $query ')' '(' $ignore ')'
    set +f
}

# Returns the date of selected day by standard of date command
# $1: n of days
get_date() {
    if [ "$os" = "Linux" ]; then
        date -d "$1 days" +"$date_fmt"
    else
        date -v"$1"d +"$date_fmt"
    fi
}

###### COMMANDS ######

# Returns the path to note of specified day
# $1: n days
# $2: label
journal_note() {
    date=$(get_date "$1")
    [ -z "$2" ] && normalize_ch=""
    printf "%s/%s$normalize_ch%s.%s" "$journal_path" "$date" "$2" "$ext"
}

# Handler to search/create notes
search_notes() {
    sel=$(get_files "$path" | xargs -I {} grep -H "" {} | $picker | sed "s/:.*//g")
    [ -z "$sel" ] && exit 0
    parse "$sel" "$path"
}

# $1: directory to search
select_notes() {
    sel=$(get_files "$1" | $picker | sed "s/\n/#/g")
    [ -z "$sel" ] && exit 0
    parse "$sel" "$1"
}

###### MAIN ######

auto_cd=${SHV_AUTO_CD:-"true"}
date_fmt=${SHV_DATE_FMT:-"%Y-%m-%d"}
exts=${SHV_EXTS:-"md adoc txt org"}
ext=$(printf "%s" "$exts" | cut -d' ' -f1)
ignore=${SHV_IGNORE:-"./.obsidian/* ./.git/*"}
journal_path=${SHV_DIARY_PATH:-"$SHV_PATH"}
os=$(uname)
path=${SHV_PATH:-"$HOME/Documents/notes"}
picker=${SHV_PICKER:-"fzf -m --ansi --print-query --bind=alt-enter:print-query"}
subcmd=${SHV_DEFAULT_CMD:-"grep"}
normalize_ch=${SHV_NORMALIZE_CH:-"-"}

while [ $# -gt 0 ]; do
    case $1 in
        --auto-cd)
            auto_cd=true
            shift
            ;;
        --no-auto-cd)
            auto_cd=false
            shift
            ;;
        -p | --path)
            path="$2"
            shift
            shift
            ;;
        -j | --journal-path)
            journal_path="$2"
            shift
            shift
            ;;
        -i | --ignore)
            ignore="$2"
            shift
            shift
            ;;
        -c | --normalize-ch)
            normalize_ch="$2"
            shift
            shift
            ;;
        -P | --picker)
            picker="$2"
            shift
            shift
            ;;
        -e | --exts)
            exts="$2"
            shift
            shift
            ;;
        *)
            break
            ;;
    esac
done

case ${1:-$subcmd} in
    j | journal)
        note=$(select_notes "$journal_path")
        ;;
    g | grep)
        note=$(search_notes)
        ;;
    sel | select)
        note=$(select_notes "$path")
        ;;
    t | today)
        note=$(journal_note +0 "$2")
        ;;
    tm | tomorrow)
        note=$(journal_note +1 "$2")
        ;;
    y | yesterday)
        note=$(journal_note -1 "$2")
        ;;
    *)
        usage "$1"
        ;;
esac

[ -z "$note" ] && exit 0
"$auto_cd" && cd "$path"
eval "${SHV_EDITOR:-${EDITOR:-vi}} $note"
