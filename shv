#!/bin/sh

set -e

: "${EDITOR:=vi}"
: "${SHV_EDITOR:=$EDITOR}"
: "${SHV_PICKER:="fzf -m --ansi --print-query --bind=alt-enter:print-query"}"
: "${SHV_PATH:=$HOME/Documents/notes}"
: "${SHV_DIARY_PATH:=$SHV_PATH/diary}"
: "${SHV_EXTS:=md adoc txt org}"
: "${SHV_TAG_EXPR:=#[a-z0-9_]+}"
: "${SHV_DATE_FMT:=%Y-%m-%d}"
: "${SHV_BMS:=scratchpad.md}"
: "${SHV_AUTO_CD:=true}"

OS=$(uname)
EXT=$(echo "$SHV_EXTS" | cut -d' ' -f1)

help() {
    cat <<EOF
shell velocity an efficient note taking utility
shv [-h|--help] <action>

actions:
  select <default>
  tags
  bookmarks | bms | b
  diary
  yesterday | ye | y
  today | t
  tomorrow | tom | tm
EOF
}

# Echo to stderr
echoerr() { echo "$@" 1>&2; }

strip() {
    # Remove all leading white-space.
    # '${1%%[![:space:]]*}': Strip everything but leading white-space.
    # '${1#${XXX}}': Remove the white-space from the start of the string.
    str="${1#${1%%[![:space:]]*}}"
    # Remove all trailing white-space.
    # '${trim##*[![:space:]]}': Strip everything but trailing white-space.
    # '${trim%${XXX}}': Remove the white-space from the end of the string.
    str="${str%${str##*[![:space:]]}}"

    printf "%s" "$str"
}

# Format string in a more usefull state
format() {
    str=$(strip "$1")
    printf "%s" "$str"
}

normalize() {
    str=$(strip "$1")
    # Substitute spaces with dashes
    str=$(echo "$str" | tr '\n' '#')
    str=$(echo "$str" | tr ' ' '-')
    str=$(echo "$str" | tr '\n' ' ')
    str=$(echo "$str" | tr '#' ' ')

    printf "%s" "$str"
}

# List files in dir
get_files() {
    query=""
    for ext in $SHV_EXTS; do
        query="${query:+${query} -o} -iname *.${ext}"
    done

    find "$1" \
        -type f \
        '(' $query ')' \
        -not -path "./.obsidian/*" \
        -not -path "./.git/*"
}

# List markdown tags in SHV_PATH
get_tags() {
    # Does a recursive
    tags=$(get_files "$SHV_PATH" | xargs -I {} grep -o -E "$SHV_TAG_EXPR" {} | sort -u)
    [ -n "$tags" ] && printf "%s\n" "$tags"
}

# Returns the date of selected day by standard of date command
# $1: offset
get_future_date() {
    [ "$OS" = "Linux" ] \
        && printf "%s" "$(date -d "$1 days" +"$SHV_DATE_FMT")" \
        || printf "%s" "$(date -v"$1"d +"$SHV_DATE_FMT")"
}

# Returns the date of selected day by standard of date command
# $1: offset
get_past_date() {
    [ "$OS" = "Linux" ] \
        && printf "%s" "$(date -d "$1 days" +"$SHV_DATE_FMT")" \
        || printf "%s" "$(date -v"$1"d +"$SHV_DATE_FMT")"
}

# Returns the path to note of specified day
# $1: offset number
# $2: label
get_diary_note() {
    [ "$1" -ge 0 ] \
        && date=$(get_future_date "$1") \
        || date=$(get_past_date "$1")
    [ -z "$2" ] \
        && printf "%s/%s.%s" "$SHV_DIARY_PATH" "$date" "$EXT" \
        || printf "%s/%s_%s.%s" "$SHV_DIARY_PATH" "$2" "$date" "$EXT"
}

# Handler to select a markdown tag
select_tag() {
    sel=$(get_tags | $SHV_PICKER)
    sel=$(format "$sel")
    printf "%s" "$sel"
}

# Returns path to bookmarked file
# $1: index of file in "array" (starts at 1)
select_bookmark() {
    printf "%s/%s" "$SHV_PATH" "$(echo "$SHV_BMS" | cut -d' ' -f"$1")"
}

# Select/create a date file
select_date() {
    sel=$(get_files "$SHV_DIARY_PATH" | $SHV_PICKER | tail -1)
    [ -z "$sel" ] && exit 0
    file=$(format "$sel")
    ! [ -f "$file" ] && file="$SHV_DIARY_PATH/$file.$EXT"

    printf "%s" "$sel"
}

# Handler to search/create note
# $1: Additional query to filter note search
select_note() {
    if [ -z "$1" ]; then
        sel=$(get_files "$SHV_PATH" | xargs -I {} grep -H "" {} | $SHV_PICKER | sed "s/:.*//g; s/\n/\#/g")
    else
        sel=$(get_files "$SHV_PATH" | xargs -I {} grep -l -H "$1" {} | $SHV_PICKER | sed "s/:.*//g; s/\n/\#/g")
    fi
    [ -z "$sel" ] && exit 0
    args=$(normalize "$sel")
    for i in $args; do
        [ -f "$i" ] \
            && file=${file:+"$file "}$i \
            || tmp="$SHV_PATH/$i.$EXT"
    done
    [ -z "$file" ] && file=$tmp

    printf "%s" "$file"
}

# Edit note with EDITOR
# $1: Path to file to edit
edit_note() {
    $SHV_EDITOR $*
}

# Main function
# $1: subcommands
main() {
    case "$1" in
        tags)
            query=$(select_tag)
            [ -z "$query" ] && exit 0
            note=$(select_note "$query")
            ;;
        diary)
            note=$(select_date)
            ;;
        today | t)
            note=$(get_diary_note +0 "$2")
            ;;
        tomorrow | tom | tm)
            note=$(get_diary_note +1 "$2")
            ;;
        yesterday | ye | y)
            note=$(get_diary_note -1 "$2")
            ;;
        bookmarks | bms | b)
            note=$(select_bookmark "$2")
            ;;
        "")
            note=$(select_note "")
            ;;
        -h | --help)
            help
            ;;
        *)
            echoerr "$0: \"$1\" unrecognized option"
            help
            ;;
    esac

    [ "$SHV_AUTO_CD" = true ] \
        && cd "$SHV_PATH"

    [ -z "$note" ] && exit 0
    edit_note "$note"
}

main "$@"
